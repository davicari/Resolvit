var pluralize = require('pluralize'); //this is a plugin https://www.npmjs.com/package/pluralize

exports.myAnalizer = function(txtToAnalyze,unwantedWords){
		
		//first i will clean the text from any symbol that do not is part of a word nor divides sentences
		var txt = txtToAnalyze.replace(/['":,]+/g, '');
		//then i will remove all the unwanted words
		txt = txt.replace( new RegExp('\\b(' + unwantedWords.join('|') + ')\\b', 'gi'),'');
		// then i will remove all extra blank spaces
		txt = txt.replace( /\s+/g,' ').trim();
		var mapOcurrences = new Map();
		//get first each sentence separated by '.'
		txt.split('.').forEach(function(sentence,sentenceIndex,fullText){
				//then if the sentence is not empty
				if(sentence.length > 0){
				//get each word separated by a blank space	
				sentence.trim().split(' ').forEach(function(word,wordIndex,sentenceText){
					var arr = []
					var total = 0;
					//getting a "clean" version of the current word to use as map key, in lowercase and in singular to comply the requirements.
					var sanitizedWord = pluralize.singular(word).toLowerCase(); 
					if(mapOcurrences.has(sanitizedWord)){ //forcing to the singular form of the word
						var oWord = mapOcurrences.get(sanitizedWord);
						arr = oWord.indexes;
						total = oWord.total + 1;
						arr.push(sentenceIndex);
					}else{
						arr.push(sentenceIndex);
						total = 1;
					}
					mapOcurrences.set(sanitizedWord,{"word":pluralize.singular(word),"total": total, "indexes":arr});
				});
			}
		});
		
		//get the map in form of an array to sort it
		let mapKeys = Array.from(mapOcurrences.entries());
		//declare the return object
		var oReturn = {Results:[]};
		//populate the return object
		mapKeys.sort().forEach(key=> {
			oReturn.Results.push({"word": key[1].word,"total-occurrences": key[1].total,"sentence-indexes":key[1].indexes});
		});
		
		
	
		
		return oReturn
	
}



